import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";
import type { User, Goal, GoalCalculations, UserProfile } from "./types";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export function formatCurrency(amount: number): string {
  return new Intl.NumberFormat('en-IN', {
    style: 'currency',
    currency: 'INR',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(amount);
}

export function formatNumber(num: number): string {
  return new Intl.NumberFormat('en-IN').format(num);
}

export function formatDate(dateString: string): string {
  return new Date(dateString).toLocaleDateString('en-IN', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
}

export function formatDateShort(dateString: string): string {
  return new Date(dateString).toLocaleDateString('en-IN', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
  });
}

export function calculateProgress(current: number, target: number): number {
  if (target === 0) return 0;
  return Math.min((current / target) * 100, 100);
}

export function getRiskLevelColor(riskLevel: string): string {
  switch (riskLevel.toLowerCase()) {
    case 'low':
    case 'very low':
      return 'text-green-600 bg-green-100';
    case 'medium':
    case 'moderate':
    case 'medium-high':
      return 'text-yellow-600 bg-yellow-100';
    case 'high':
    case 'very high':
      return 'text-red-600 bg-red-100';
    default:
      return 'text-gray-600 bg-gray-100';
  }
}

export function getTimelineText(months: number): string {
  if (months < 12) {
    return `${months} months`;
  } else if (months === 12) {
    return '1 year';
  } else if (months < 24) {
    const years = Math.floor(months / 12);
    const remainingMonths = months % 12;
    if (remainingMonths === 0) {
      return `${years} years`;
    }
    return `${years}.${remainingMonths} years`;
  } else {
    const years = Math.round(months / 12 * 10) / 10;
    return `${years} years`;
  }
}

export function generateInvestmentReport(
  userData: UserProfile, 
  selectedGoal: string, 
  goalData: any, 
  calculations: GoalCalculations
): void {
  const reportContent = `
WEALLTH - INVESTMENT PLAN REPORT
===============================

Generated for: ${userData.fullName}
Date: ${new Date().toLocaleDateString('en-IN')}
Goal: ${selectedGoal}

GOAL SUMMARY
============
Target Amount: ${formatCurrency(goalData.targetAmount)}
Timeline: ${getTimelineText(goalData.timeline)}
Current Investment: ${formatCurrency(goalData.currentInvestment)}
Monthly Saving Required: ${formatCurrency(calculations.monthlySaving)}

FINANCIAL PROFILE
=================
Monthly Income: ${formatCurrency(userData.monthlySalary)}
Fixed Expenses: ${formatCurrency(userData.fixedExpenses)}
Variable Expenses: ${formatCurrency(userData.variableExpenses)}
Available for Investment: ${formatCurrency(userData.monthlySalary - userData.fixedExpenses - userData.variableExpenses)}

INVESTMENT STRATEGY
==================
Based on your ${goalData.timeline}-month timeline, we recommend:

Primary Investment: ${goalData.timeline <= 18 ? 'Balanced Mutual Fund SIP' : goalData.timeline >= 36 ? 'Equity Mutual Fund SIP' : 'Hybrid Fund SIP'}
Risk Level: ${goalData.timeline <= 18 ? 'Moderate' : goalData.timeline >= 36 ? 'High' : 'Moderate'}
Expected Returns: 10-12% annually

NEXT STEPS
==========
1. Start your SIP with the recommended amount
2. Review and rebalance quarterly
3. Track progress monthly
4. Adjust strategy if life circumstances change

DISCLAIMER
==========
This report is generated by Weallth platform by Erfinden Technologies. 
Please consult with a financial advisor for personalized advice.

Generated on: ${new Date().toISOString()}
  `;

  // Create and download the report
  const blob = new Blob([reportContent], { type: 'text/plain; charset=utf-8' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `Wealth_Plan_${selectedGoal.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.txt`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

export function validateEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

export function validatePassword(password: string): { valid: boolean; message?: string } {
  if (password.length < 6) {
    return { valid: false, message: 'Password must be at least 6 characters long' };
  }
  return { valid: true };
}

export function debounce<T extends (...args: any[]) => any>(
  func: T,
  delay: number
): (...args: Parameters<T>) => void {
  let timeoutId: NodeJS.Timeout;
  return (...args: Parameters<T>) => {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => func(...args), delay);
  };
}

export function getGoalStatusColor(status: string): string {
  switch (status) {
    case 'active':
      return 'text-green-600 bg-green-100';
    case 'completed':
      return 'text-blue-600 bg-blue-100';
    case 'paused':
      return 'text-yellow-600 bg-yellow-100';
    default:
      return 'text-gray-600 bg-gray-100';
  }
}

export function calculateSIPMaturityAmount(
  monthlyAmount: number,
  annualRate: number,
  years: number
): number {
  const monthlyRate = annualRate / 12 / 100;
  const months = years * 12;
  
  if (monthlyRate === 0) {
    return monthlyAmount * months;
  }
  
  const futureValue = monthlyAmount * 
    ((Math.pow(1 + monthlyRate, months) - 1) / monthlyRate) * 
    (1 + monthlyRate);
    
  return Math.round(futureValue);
}

export function getInvestmentAdvice(timeline: number, amount: number): string[] {
  const advice = [];
  
  if (timeline <= 12) {
    advice.push("Consider liquid funds or short-term debt funds for goals less than 1 year");
    advice.push("Avoid equity investments for such short timelines");
  } else if (timeline <= 36) {
    advice.push("Balanced or hybrid funds work well for 1-3 year goals");
    advice.push("Consider a mix of debt and equity for stability");
  } else {
    advice.push("Equity mutual funds are ideal for long-term wealth creation");
    advice.push("Start with large-cap funds and gradually diversify");
  }
  
  if (amount >= 1000000) {
    advice.push("Consider portfolio management services for large investments");
  }
  
  return advice;
}

export function sleep(ms: number): Promise<void> {
  return new Promise(resolve => setTimeout(resolve, ms));
}

export function generateId(): string {
  return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

export function truncateText(text: string, maxLength: number): string {
  if (text.length <= maxLength) return text;
  return text.substring(0, maxLength) + '...';
}

export function capitalize(str: string): string {
  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
}

export function getInitials(name: string): string {
  return name
    .split(' ')
    .map(word => word.charAt(0))
    .join('')
    .toUpperCase()
    .substring(0, 2);
}
